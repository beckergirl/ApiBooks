{"ast":null,"code":"import { Libro } from '../models/libro';\nimport * as i0 from \"@angular/core\";\nexport class LibrosService {\n  constructor() {\n    this.libros = [new Libro(\"Las Correcciones\", \"Libro de bolsillo\", \"Jonathan Franzen\", 24.50, \"http://2.bp.blogspot.com/-rdzYhd7exXM/UKD8HshRLfI/AAAAAAAAAPY/gg0Ov6BKnW8/s1600/Las+correcciones+-+Jonathan+Frazen.jpg\", 101, 1), new Libro(\"4, 3, 2, 1\", \"Libro de bolsillo\", \"Paul Auster\", 22.50, \"https://imagessl6.casadellibro.com/a/l/t7/26/9788429776126.jpg\", 202, 2), new Libro(\"En el camino\", \"novela américana\", \"Jack Kerouac\", 26.50, \"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQA3CQ4B-sA78Eh0M-V8kbEiXVu8Hji70jPeOWXPitn4lr31Lui\", 303, 3), new Libro(\"Middlesex\", \"Libro de bolsillo\", \"Jeffrey Eugenides\", 28.50, \"https://www.anagrama-ed.es/uploads/media/portadas/0001/16/d86b81e53fc2fc900d0164956519c3d31a894bec.jpeg\", 404, 4), new Libro(\"Lolita\", \"Libro de bolsillo\", \"Vladimir Nabokov\", 12.50, \"https://upload.wikimedia.org/wikipedia/commons/thumb/5/57/Lolita_1955.JPG/220px-Lolita_1955.JPG\", 505, 5)];\n  }\n  //Repaso de Fundamentos.Métodos. En este bloque se implementarán los métodos que vayamos a usar (setters y getters en caso de que sea necesarios, o métodos privados si se necesitan).\n  setLibros(Libros) {\n    this.libros = Libros;\n    return Libros;\n  }\n  getLibros() {\n    return this.libros;\n  }\n  // métodos públicos:\n  getAllBooks() {\n    return this.libros;\n  }\n  getOneBook(id_libro) {\n    let getone;\n    for (let i = 0; i < this.libros.length; i++) {\n      if (id_libro == this.libros[i].id_libro) {\n        getone = this.libros[i];\n      }\n    }\n    return getone;\n  }\n  addBook(subirLibro) {\n    this.libros.push(subirLibro); /// libros (cuando añadía un nuevo libro a libros)\n  }\n  ///////////////////NO FUNCIONA\n  editBook(actualizar) {\n    let libroTrue = this.libros.find(element => element.id_libro == actualizar.id_libro);\n    let identificado = libroTrue != undefined; // buscar libro por id de libro , si en Libros encuentra el id , actualizar libro.\n    if (identificado == true) {\n      /// no funciona!\n      libroTrue.titulo = actualizar.titulo, libroTrue.autor = actualizar.autor, libroTrue.tipoLibro = actualizar.tipoLibro, libroTrue.precio = actualizar.precio, libroTrue.photo = actualizar.photo, /*   libroTrue.id_libro = actualizarLibro.id_libro, */ /////porque lo identificamos por ese ID y actualizamos\n      libroTrue.id_usuario = actualizar.id_usuario;\n    } else {\n      /*  identificado = false; */\n    }\n    // comprobar que no pase nada por no usar un else, (else vacio)\n    return identificado;\n  }\n  deleteBook(id_libro) {\n    let buscarid = this.libros.findIndex(element => element.id_libro == id_libro);\n    let eliminarLibro = buscarid != -1;\n    if (eliminarLibro) {\n      this.libros.splice(buscarid, 1); // buscar y borrar y borrar 1 elemento\n    } else {\n      let message = \"No se encuentra el libro\";\n      console.log(message);\n    }\n    return eliminarLibro;\n  }\n  static #_ = this.ɵfac = function LibrosService_Factory(t) {\n    return new (t || LibrosService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LibrosService,\n    factory: LibrosService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"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","names":["Libro","LibrosService","constructor","libros","setLibros","Libros","getLibros","getAllBooks","getOneBook","id_libro","getone","i","length","addBook","subirLibro","push","editBook","actualizar","libroTrue","find","element","identificado","undefined","titulo","autor","tipoLibro","precio","photo","id_usuario","deleteBook","buscarid","findIndex","eliminarLibro","splice","message","console","log","factory","providedIn"],"sourceRoot":"","sources":["/Users/MiGo/Desktop/myBOOKS/Front/src/app/shared/libros.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Libro } from '../models/libro';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LibrosService {\n\n  private libros : Libro[];\n\n\n  constructor(){  /// libros está privado, hay que hacer getters y setters.\n\n    this.libros = [  \n\n      new Libro (\"Las Correcciones\", \"Libro de bolsillo\",\"Jonathan Franzen\", 24.50, \"http://2.bp.blogspot.com/-rdzYhd7exXM/UKD8HshRLfI/AAAAAAAAAPY/gg0Ov6BKnW8/s1600/Las+correcciones+-+Jonathan+Frazen.jpg\", 101,1),\n      new Libro (\"4, 3, 2, 1\", \"Libro de bolsillo\",\"Paul Auster\", 22.50, \"https://imagessl6.casadellibro.com/a/l/t7/26/9788429776126.jpg\", 202, 2),\n      new Libro (\"En el camino\", \"novela américana\",\"Jack Kerouac\", 26.50, \"https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQA3CQ4B-sA78Eh0M-V8kbEiXVu8Hji70jPeOWXPitn4lr31Lui\", 303, 3),\n      new Libro (\"Middlesex\", \"Libro de bolsillo\",\"Jeffrey Eugenides\" , 28.50, \"https://www.anagrama-ed.es/uploads/media/portadas/0001/16/d86b81e53fc2fc900d0164956519c3d31a894bec.jpeg\", 404,4),\n      new Libro (\"Lolita\", \"Libro de bolsillo\",\"Vladimir Nabokov\" , 12.50, \"https://upload.wikimedia.org/wikipedia/commons/thumb/5/57/Lolita_1955.JPG/220px-Lolita_1955.JPG\", 505,5),\n\n    ] \n  }\n    //Repaso de Fundamentos.Métodos. En este bloque se implementarán los métodos que vayamos a usar (setters y getters en caso de que sea necesarios, o métodos privados si se necesitan).\n\n    public setLibros(Libros: Libro[]){\n\n      this.libros = Libros;\n\n      return Libros;\n    }\n    public getLibros(): Libro[]{\n\n      return this.libros;\n    }\n    // métodos públicos:\n\n    public getAllBooks(): Libro[]{   /// GET (mostrar todos) \n\n      return this.libros;\n    }\n\n    public getOneBook(id_libro: number): Libro{   ///GET (buscar por id de Libro)\n\n      let getone: Libro;\n      for(let i = 0; i < this.libros.length; i++){\n\n        if(id_libro == this.libros[i].id_libro){\n\n          getone = this.libros[i]\n        }\n      }\n         return getone;\n    }\n\n    public addBook(subirLibro: Libro): void{   /// añadir (POST en postman)\n\n      this.libros.push(subirLibro) /// libros (cuando añadía un nuevo libro a libros)\n\n    }\n///////////////////NO FUNCIONA\n   public editBook(actualizar: Libro): boolean{  //// modificar (PUT en postman) (true o false) actualizar en updatelibro \n\n       let libroTrue = this.libros.find(element => element.id_libro == actualizar.id_libro); \n       let identificado = libroTrue != undefined;  // buscar libro por id de libro , si en Libros encuentra el id , actualizar libro.\n\n        if(identificado == true){  /// no funciona!\n\n            libroTrue.titulo = actualizar.titulo,\n            libroTrue.autor = actualizar.autor,\n            libroTrue.tipoLibro = actualizar.tipoLibro,\n            libroTrue.precio = actualizar.precio,\n            libroTrue.photo = actualizar.photo,\n          /*   libroTrue.id_libro = actualizarLibro.id_libro, */  /////porque lo identificamos por ese ID y actualizamos\n            libroTrue.id_usuario =actualizar.id_usuario\n\n         }else{\n\n         /*  identificado = false; */\n\n         } \n// comprobar que no pase nada por no usar un else, (else vacio)\n           return identificado\n        } \n   \n    public deleteBook(id_libro: number): boolean {\n\n          let buscarid: number = this.libros.findIndex(element => element.id_libro == id_libro);\n          let eliminarLibro: boolean = buscarid != -1;\n\n          if (eliminarLibro){\n\n            this.libros.splice(buscarid, 1);  // buscar y borrar y borrar 1 elemento\n          } else {\n\n            let message = \"No se encuentra el libro\"\n            console.log(message);\n          }\n          return eliminarLibro\n        }\n  }\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}